/*!
 * Start Bootstrap - SB Admin 2 v4.0.3 (https://startbootstrap.com/template-overviews/sb-admin-2)
 * Copyright 2013-2019 Start Bootstrap
 * Licensed under MIT (https://github.com/BlackrockDigital/startbootstrap-sb-admin-2/blob/master/LICENSE)
 */
// Collapse Menu
!function (t) {
    "use strict";
    t("#sidebarToggle, #sidebarToggleTop").on("click", function (o) {
        t("body").toggleClass("sidebar-toggled"),
            t(".sidebar").toggleClass("toggled"),
            t(".sidebar").hasClass("toggled") && t(".sidebar .collapse").collapse("hide")
    }),
        t(window).resize(function () { t(window).width() < 768 && t(".sidebar .collapse").collapse("hide") }),
        t("body.fixed-nav .sidebar").on("mousewheel DOMMouseScroll wheel", function (o) {
            if (768 < t(window).width()) {
                var e = o.originalEvent, l = e.wheelDelta || -e.detail; this.scrollTop += 30 * (l < 0 ? 1 : -1),
                    o.preventDefault()
            }
        }), t(document).on("scroll", function () {
            100 < t(this).scrollTop() ? t(".scroll-to-top").fadeIn() : t(".scroll-to-top").fadeOut()
        }),
        t(document).on("click", "a.scroll-to-top", function (o) {
            var e = t(this); t("html, body").stop().animate({ scrollTop: t(e.attr("href")).offset().top }, 1e3, "easeInOutExpo"),
                o.preventDefault()
        })
}(jQuery);



//Calendar
$(function () {
    $('#datetimepicker1').datetimepicker({
        sideBySide: true,
        inline: true
    });
});
$(function () {
    $('#datetimepicker2').datetimepicker({
        sideBySide: true,
        inline: true,
        format: "YYYY-MM-DD hh:mm"
    });
});

function Todos(note, desc, dueDate, comment, isDone, isFavorite, visibleTask) {
    var self = this;
    self.note = ko.observable(note);
    self.desc = ko.observable(desc);
    self.dueDate = ko.observable(dueDate);
    self.comment = ko.observableArray([]);
    self.isDone = ko.observable(isDone);
    self.isFavorite = ko.observable(isFavorite);
    self.visibleTask = ko.observable(visibleTask);
}
function Category(category) {
    var self = this;
    self.category = ko.observable(category);
}

function AppViewModel() {
    var self = this;

    self.todaysDate = moment(new Date());
    self.todos = ko.observableArray([]);
    self.categories = ko.observableArray([]);
    self.activeTodoComments = ko.observableArray();
    self.all = ko.observableArray([]);
    self.today = ko.observableArray([]);
    self.favorites = ko.observableArray([]);

    self.newCategory = ko.observable();
    self.shouldValidate = ko.observable(false);

    self.newNote = ko.observable();
    self.newDesc = ko.observable();
    self.newDueDate = ko.observable();
    self.newComment = ko.observable();

    self.show = ko.observable(true);
    self.showfields = ko.observable(false);
    self.flag = ko.observable(false);
    self.actionTitle = ko.observable('Add');
    self.editTask = ko.observable();

    //Add Category
    self.addCategory = function () {
        self.categories.push(new Category(
            self.newCategory()
        ));
        self.newCategory("");
    }
    //Show incomplete task
    self.incompleteTasks = ko.computed(function () {
        return ko.utils.arrayFilter(self.todos(),
            function (todos) { return !todos.isDone() });
    });
    //Add Favorite Task
    self.isFavorite = ko.observable(false);
    self.countFavorite = ko.observable(0);
    self.addFavorite = function () {
        var previousCountFav = self.countFavorite();
        self.countFavorite(previousCountFav + 1);
        self.isFavorite(!self.isFavorite());
    };

    //Add to completed Tasks
    self.completedTasks = ko.observableArray([]);
    //self.completedTasks = self.todos.filterByProperty("isDone", true);

    self.showCompletedTasks = function() {
        self.completedTasks.push(new Todos(
            self.newNote()
        ))};
    
    //Visible Task
    self.visibleTask = ko.observable(false);


    //Add/Remove tasks from Today
    self.countTaskToday = ko.observable(0);
    self.updateCountToday = function () {

        self.countTaskToday(0);

        for (let i = 0; i < self.todos().length; i++) {

            let todoDate = moment(self.todos()[i].dueDate());
            if (
                todoDate.format('D') == self.todaysDate.format('D') &&
                todoDate.format('M') == self.todaysDate.format('M') &&
                todoDate.format('YYYY') == self.todaysDate.format('YYYY')
            ) {
                var previousCountToday = self.countTaskToday();
                self.countTaskToday(previousCountToday + 1);
            }
        }
    }
    //Delete task
    self.deleteTask = function (todos) {
        self.todos.remove(todos)
    };

    //Add New Task 
    self.showTaskFields = function () {
        self.show(false);
        self.showfields(true);
        self.flag(false);
        self.actionTitle('Add');
    };
    self.addTask = function () {
        self.shouldValidate(true);
        if (self.newNote() == null || self.newNote() == "") return;
        if (self.newDesc() == null || self.newDesc() == "") return;

        if (self.flag()) {
            let newDate = $('#datetimepicker2').datetimepicker('viewDate').format('YYYY-MM-DD hh:mm');
            self.editTask().note(self.newNote())
            self.editTask().desc(self.newDesc())
            self.editTask().dueDate(newDate);
            self.editTask().comment(self.newComment())
            self.flag(false)
            
        } else {
            self.todos.push(new Todos(
                self.newNote(),
                self.newDesc(),
                moment($('#datetimepicker2').datetimepicker('viewDate')).format('YYYY-MM-DD hh:mm'),
                self.newComment()
            ));
            self.newNote(""),
                self.newDesc(""),
                self.newDueDate(""),
                self.newComment("")
        }
        self.show(true);
        self.showfields(false);
        self.shouldValidate(false);
        $('#myModal2').modal('hide');
        self.updateCountToday();
        return true;
    }
    // Task Button Edit
    self.editTaskButton = function (Todos) {
        var s = Todos.dueDate();
        self.editTask(Todos);
        self.newNote(Todos.note());
        self.newDesc(Todos.desc());
        $('#datetimepicker2').datetimepicker('date', moment(Todos.dueDate()));

        self.newComment(Todos.comment());

        self.showfields(true);
        self.flag(true);
        self.actionTitle('Edit');
    }
    // Add/Edit Category
    self.showcategory = ko.observable(true);
    self.showCategory = ko.observable(false);
    self.flagg = ko.observable(false);
    self.actionT = ko.observable('Add');
    self.editCateg = ko.observable();

    self.showCategoryField = function () {
        self.showcategory(false);
        self.showCategory(true);
        self.flagg(false);
        self.actionT('Add');
    };
    self.addCategory = function () {
        if (self.flagg()) {
            self.editCateg().category(self.newCategory())
            self.flagg(false)
        } else {
            self.categories.push(new Category(
                self.newCategory()
            ));
            self.newCategory("")
        }
        self.showcategory(true);
        self.showCategory(false);
        $('#myModal').modal('hide');
        return true;
    }
    self.editCategory = function (Category) {
        self.editCateg(Category);
        self.newCategory(Category.category());

        self.showCategory(true);
        self.flagg(true);
        self.actionT('Edit');
    }
    //Delete category
    self.deleteCategory = function (categories) {
        self.categories.remove(categories)
    };
    //Show Task
    self.showTask = function (Todo) {
        self.activeTodoComments(Todo.comment());
        self.editTask(Todo);
        self.newNote(Todo.note());
        self.newDesc(Todo.desc());
        self.newDueDate(Todo.dueDate());
        self.newComment(Todo.comment());

        self.showfields(true);
        self.flag(true);
        self.actionTitle('Edit');
    }
    // Save Comment
    self.comm = ko.observable();
    self.saveComment = function (e) {
        var comment = self.comm();
        self.activeTodoComments.push(comment);
        self.comm("");
    }

    //Drag and Drop
     self.drop = function (data, AppViewModel) {
        model.todos.remove(data);
        model.categories.push(data);
    }
};
ko.applyBindings(new AppViewModel());

